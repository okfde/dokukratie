name: be
description: |
  Kleine und Große Anfragen und ihre Antworten aus der Parlamentsdokumentation
  des Berliner Senats. Diese Sammlung ist Teil des Projekts "dokukratie" von
  FragDenStaat, das versucht, alle Drucksachen aus allen 16 Landesparlamenten
  einzusammeln (früher bekannt als "kleineanfragen.de")
title: "[BE] Parlamentsdokumentation (PARDOK) des Abgeordnetenhauses von Berlin"
stealthy: true
prefix: de-dok-be

publisher:
  type: parliament
  name: Abgeordnetenhaus Berlin
  url: https://parlament-berlin.de
  country: de
  jurisdiction:
    id: be
    name: Berlin

resources:
  - name: archive.json
    url: https://s3.investigativedata.org/dokukratie/be/archive.json
    mime_type: application/json+archive

scraper:
  name: portala
  url: https://pardok.parlament-berlin.de/portala/start.tt.html

document_types:
  interpellation: Schriftliche Anfrage  # WP =18
  minor_interpellation: Kleine Anfrage  # WP <18

pipeline:

  # emit scrape criteria
  init:
    method: dokukratie.operations:init
    params:
      legislative_terms: 19  # earliest: 11
      document_types: interpellation
      url: https://pardok.parlament-berlin.de/portala/browse.tt.html
      dateformat: "%Y %m %d"
    handle:
      pass: fetch

  # initialize session for cookie & referer
  fetch:
    method: memorious_extended.operations:fetch
    handle:
      pass: search

  # post request to actual search
  search:
    method: dokukratie.scrapers.portala:search
    params:
      url: https://pardok.parlament-berlin.de/portala/browse.tt.json
      query_template: dokukratie/scrapers/portala.query.json
    handle:
      pass: parse_json

  # filter json data
  parse_json:
    method: memorious_extended.operations:parse_jq
    params:
      pattern: '{item_count: .item_count, report_id: .report_id}'
    handle:
      pass: fetch_results

  # fetch response based on `report_id`
  fetch_results:
    method: dokukratie.scrapers.portala:fetch_results
    params:
      url: https://pardok.parlament-berlin.de/portala/report.tt.html
    handle:
      pass: parse_results

  parse_results:
    method: memorious_extended.operations:parse_listing
    params:
      items: './/div[contains(@class, "efxRecordRepeater")]'
      include_paths:
        - './/span[@class="h6"]/a'
      meta:
        title: './/h3/span'
        interpellation_raw: './/span[@class="h6"]'
        answer_raw:
          - ".//div[contains(@id, 'collapse-details')]//a[contains(text(), 'Drucksache')]/.."
          - '(.//span[@class="h6"])[2]'  # WP=11
        source_url: './/a[contains(@class, "js-copy-link")]/@data-link'
      skip_incremental:
        key:
          data: source_url
        target:
          stage: store
    handle:
      fetch: download  # yield pdf urls and detail metadata

  download:
    method: memorious_extended.operations:fetch
    handle:
      pass: extract

  extract:
    method: memorious_extended.operations:regex_groups
    params:
        interpellation_raw: .*(Schriftliche|Kleine)\s+Anfrage(\s+Nr\.\s\d{1,2}\/\d+)?\s+(?P<originators_raw>.*)\s+Drucksache\s+(?P<interpellation_reference>\d{2}\/\d+)\s+(.*)?vom\s+(?P<interpellation_date>[\d\.]+)
        answer_raw: .*(?:Antwort)?(\s+\(.*\))?\s+(?P<answerers>.*)\s?Drucksache\s+(?P<reference>\d{2}\/\d+)\s+(.*)?vom\s+(?P<published_at>[\d\.]+)
        originators_raw:
          store_as: originators
          split: ","
          patterns: (?P<name>.*)\((?P<party>.*)\)
    handle:
      pass: clean

  # clean and validate metadata
  clean:
    method: dokukratie.operations:clean
    params:
      values:
        foreign_id: "{publisher[jurisdiction][id]}-{reference}"
      required:
        - legislative_term
        - document_type
        - reference
        - foreign_id
        - title
        - originators
        - answerers
        - published_at
        - publisher
      typing:
        ignore:
          - modified_at
          - retrieved_at
          - reference
          - interpellation_reference
        dateparserkwargs:
          dayfirst: true
      drop:
        - page
        - formdata
    handle:
      pass: store

  store:
    method: memorious_extended.operations:store
