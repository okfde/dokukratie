name: be
description: PARDOK Berlin

publisher:
  type: parliament
  name: Abgeordnetenhaus Berlin
  url: https://parlament-berlin.de
  jurisdiction:
    id: be
    name: Berlin

scraper:
  name: portala
  url: https://pardok.parlament-berlin.de/portala/start.tt.html

document_types:
  interpellation: Schriftliche Anfrage  # WP =18
  minor_interpellation: Kleine Anfrage  # WP <18

pipeline:

  # emit scrape criteria
  init:
    method: dokukratie.scrapers.operations:init
    params:
      # legislative_terms: 18  # earliest: 11
      legislative_terms: 18
      document_types: interpellation
      url: https://pardok.parlament-berlin.de/portala/browse.tt.html
      dateformat: "%Y %m %d"
    handle:
      pass: fetch

  # initialize session for cookie & referer
  fetch:
    method: dokukratie.scrapers.operations:fetch
    handle:
      pass: search

  # post request to actual search
  search:
    method: dokukratie.scrapers.portala:search
    params:
      url: https://pardok.parlament-berlin.de/portala/browse.tt.json
      query_template: dokukratie/scrapers/portala.query.json
    handle:
      pass: parse_json

  # filter json data
  parse_json:
    method: dokukratie.scrapers.operations:parse_jq
    params:
      pattern: '{item_count: .item_count, report_id: .report_id}'
    handle:
      pass: fetch_results

  # fetch response based on `report_id`
  fetch_results:
    method: dokukratie.scrapers.portala:fetch_results
    params:
      url: https://pardok.parlament-berlin.de/portala/report.tt.html
    handle:
      pass: parse_results

  parse_results:
    method: dokukratie.scrapers.operations:parse
    params:
      items: './/div[contains(@class, "efxRecordRepeater")]'
      include_paths:
        - './/span[@class="h6"]/a'
      meta:
        title: './/h3/span'
        interpellation_raw: './/span[@class="h6"]'
        answer_raw:
          - ".//div[contains(@id, 'collapse-details')]//a[contains(text(), 'Drucksache')]/.."
          - '(.//span[@class="h6"])[2]'  # WP=11
        source_url: './/a[contains(@class, "js-copy-link")]/@data-link'
      skip_incremental:
        key:
          data: source_url
        target:
          stage: store
    handle:
      fetch: download  # yield pdf urls and detail metadata

  download:
    method: dokukratie.scrapers.operations:fetch
    handle:
      pass: clean

  # extract & cleanup metadata
  clean:
    method: dokukratie.scrapers.operations:clean
    params:
      extract:
        interpellation_raw: .*(Schriftliche|Kleine)\s+Anfrage(\s+Nr\.\s\d{1,2}\/\d+)?\s+(?P<originators_raw>.*)\s+Drucksache\s+(?P<interpellation_reference>\d{2}\/\d+)\s+(.*)?vom\s+(?P<interpellation_date>[\d\.]+)
        answer_raw: .*Antwort\s+(?P<answerers>.*)\s+Drucksache\s+(?P<reference>\d{2}\/\d+)\s+(.*)?vom\s+(?P<published_at>[\d\.]+)
      parse:
        originators:
          source: originators_raw
          split: ","
          patterns: (?P<name>.*)\((?P<party>.*)\)
      dateparser:
        dayfirst: true
    handle:
      pass: store

  # store document & metadata to disk
  store:
    method: dokukratie.scrapers.operations:store
